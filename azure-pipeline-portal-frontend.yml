# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    exclude:
      - azure-pipeline-*.yml

pool:
  vmImage: ubuntu-latest

variables:
  - name: PathToDockerfile
    value: Dockerfile
  - name: HelmChartPath
    value: helm/portal-frontend
  - name: IsRegularBuild
    value: $[or(eq(variables.BranchType, 'DEVELOP'), eq(variables.BranchType, 'MAIN'), eq(variables.BranchType, 'FEATURE'))]
  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      - name: BranchType
        value: 'MAIN'
  - ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
      - name: BranchType
        value: 'DEVELOP'
  - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') }}:
      - name: BranchType
        value: 'FEATURE'
  - group: common-variables
  - group: portal-frontend

stages:
  - stage: Build
    displayName: Build stage

    jobs:
      - job: build
        displayName: Build
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          - task: Bash@3
            name: SetVariables
            displayName: Set pipeline variables
            inputs:
              targetType: inline
              script: |
                echo "Detected branch type ${BRANCHTYPE}"
                REVISION=`grep -m 1 'version' package.json | cut -d ':' -f2  | cut -d '"' -f2`
                GIT_SHORT_COMMIT_HASH=`git rev-parse --short ${BUILD_SOURCEVERSION}`
                ARTIFACT_VERSION="${REVISION}-${BRANCHTYPE}.${GIT_SHORT_COMMIT_HASH}"
                echo "Artifact version: ${ARTIFACT_VERSION}"
                echo "##vso[task.setvariable variable=Revision;isoutput=true]${REVISION}"
                echo "##vso[task.setvariable variable=GitShortCommitHash;isoutput=true].${GIT_SHORT_COMMIT_HASH}"
                echo "##vso[task.setvariable variable=BranchName;isoutput=true].${BRANCHTYPE}"
                echo "##vso[task.setvariable variable=ArtifactVersion;isoutput=true]${ARTIFACT_VERSION}"
                echo "##vso[build.addbuildtag]${ARTIFACT_VERSION}"
                echo "##vso[build.updatebuildnumber]${ARTIFACT_VERSION}"
              noRc: false

          - script: |
              npm install
              npm build
            workingDirectory: implementation
            displayName: 'npm install and build'

          - task: Docker@2
            displayName: Build Docker image and push to ACR
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(dockerImageName)
              tags: |
                latest
                $(SetVariables.ArtifactVersion)
              command: buildAndPush
              Dockerfile: $(PathToDockerfile)

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: $(helmVersion)

          - task: HelmDeploy@0
            displayName: Pre-Check Helm deployment
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(k8sServiceConnection)'
              azureResourceGroup: '$(k8sResourceGroup)'
              kubernetesCluster: '$(k8sClusterName)'
              command: upgrade
              namespace: $(k8sNamespace)
              chartType: filepath
              chartPath: $(HelmChartPath)
              releaseName: $(k8sReleaseName)
              install: true
              waitForExecution: true
              failOnStderr: true
              arguments: '--atomic
                --dry-run
                --create-namespace
                --set image.repository=$(acrName)/$(dockerImageName)
                --set image.tag=$(SetVariables.ArtifactVersion)
                --set ingress.hosts[0].host=$(k8sIngressHost)
                --set ingress.hosts[0].paths[0].path=$(k8sIngressPath)
                --set ingress.hosts[0].paths[0].pathType=Prefix
                --set container.main.env.API_URL=$(backendApiUrl)'

  - stage: Deploy
    displayName: Deploy application
    condition: and(succeeded(), eq(variables.IsRegularBuild, true))
    dependsOn: Build
    variables:
      ArtifactVersion: $[ stageDependencies.Build.build.outputs['SetVariables.ArtifactVersion'] ]

    jobs:
      - deployment: Deploy
        displayName: Deploy to AKS
        environment: '$(deploymentEnvironment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: HelmInstaller@1
                  inputs:
                    helmVersionToInstall: $(helmVersion)

                - task: HelmDeploy@0
                  displayName: Authenticate on Kubernetes
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: '$(k8sServiceConnection)'
                    azureResourceGroup: '$(k8sResourceGroup)'
                    kubernetesCluster: '$(k8sClusterName)'
                    command: 'login'

                - task: HelmDeploy@0
                  displayName: Helm deployment
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: '$(k8sServiceConnection)'
                    azureResourceGroup: '$(k8sResourceGroup)'
                    kubernetesCluster: '$(k8sClusterName)'
                    command: upgrade
                    namespace: $(k8sNamespace)
                    chartType: filepath
                    chartPath: $(HelmChartPath)
                    releaseName: $(k8sReleaseName)
                    install: true
                    waitForExecution: true
                    failOnStderr: true
                    arguments: '--atomic
                      --create-namespace
                      --set image.repository=$(acrName)/$(dockerImageName)
                      --set image.tag=$(SetVariables.ArtifactVersion)
                      --set ingress.hosts[0].host=$(k8sIngressHost)
                      --set ingress.hosts[0].paths[0].path=$(k8sIngressPath)
                      --set ingress.hosts[0].paths[0].pathType=Prefix
                      --set container.main.env.API_URL=$(backendApiUrl)'
